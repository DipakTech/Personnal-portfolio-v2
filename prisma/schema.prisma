generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id         String   @id @default(uuid())
    email      String   @unique
    clerkId    String   @unique
    name       String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userAvatar String?

    conversations Conversation[]
    seenMessages  Message[]      @relation("SeenMessages")
    accounts      Account[]
    messages      Message[]
    posts         Post[]
}

model Post {
    id              String   @id @default(uuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    title           String   @db.VarChar(255)
    category        String   @db.VarChar(255)
    slug            String   @db.VarChar(255)
    content         String?
    seoKeywords     String?
    metaDescription String?
    published       Boolean  @default(false)
    author          User     @relation(fields: [authorId], references: [id])
    authorId        String
    tags            Tag[]

    @@index([authorId])
}

model Tag {
    id     String @default(uuid())
    name   String
    post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@id([id, postId])
    @@index([postId])
}

model Account {
    id     String @id @default(uuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])
    // stripeCustomerId String @unique

    @@unique([userId])
    @@index([userId])
}

model Conversation {
    id            String   @id @default(uuid())
    createdAt     DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name          String?
    isGroup       Boolean?

    users    User[]
    messages Message[]
}

model Message {
    id        String   @id @default(uuid())
    body      String?
    image     String?
    createdAt DateTime @default(now())

    seen           User[]       @relation("SeenMessages")
    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    senderId       String
    sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

    @@index([conversationId])
    @@index([senderId])
}
